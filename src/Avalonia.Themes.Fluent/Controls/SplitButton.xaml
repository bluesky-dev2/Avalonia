<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        x:CompileBindings="True">

  <Design.PreviewWith>
    <Border Padding="20">
      <SplitButton />
    </Border>
  </Design.PreviewWith>

  <Styles.Resources>
    <x:Double x:Key="SplitButtonPrimaryButtonSize">32</x:Double>
    <x:Double x:Key="SplitButtonSecondaryButtonSize">32</x:Double>
  </Styles.Resources>

  <Style Selector="SplitButton">
    <Setter Property="Background" Value="{DynamicResource SplitButtonBackground}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForeground}" />
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource SplitButtonBorderThemeThickness}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Center" />
    <!--<Setter Property="FontFamily" Value="{ThemeResource ContentControlThemeFontFamily}" />
    <Setter Property="FontWeight" Value="Normal" />
    <Setter Property="FontSize" Value="{ThemeResource ControlContentThemeFontSize}" />
    <Setter Property="UseSystemFocusVisuals" Value="True" />
    <Setter Property="FocusVisualMargin" Value="-3" />-->
    <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
    <Setter Property="Padding" Value="{DynamicResource ButtonPadding}" />
    <Setter Property="CornerRadius" Value="{DynamicResource ControlCornerRadius}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate>
          <!-- A Border was added here since Avalonia does not support Background/Border/CornerRadius on Grid directly -->
          <!-- ClipToBounds added as a temporary work-around for: https://github.com/AvaloniaUI/Avalonia/issues/2105 -->
          <Border Background="Transparent"
                  CornerRadius="{TemplateBinding CornerRadius}"
                  ClipToBounds="True">
            <!-- In WinUI, a separate child style for the inner buttons is provided here.
                 For avalonia that style is simplified and pulled out separately below.
                 A style is needed to override any button default background/foreground/border colors, etc. -->
            <Grid>
              
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"
                                  MinWidth="{DynamicResource SplitButtonPrimaryButtonSize}" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition Width="{DynamicResource SplitButtonSecondaryButtonSize}" />
              </Grid.ColumnDefinitions>

              <!-- Changed from Grid to Rectangle since Avalonia does not support Background on Grid directly -->
              <Rectangle x:Name="PrimaryBackgroundRectangle"
                         Fill="{TemplateBinding Background}" />

              <Rectangle x:Name="SecondaryBackgroundRectangle"
                         Fill="{TemplateBinding Background}"
                         Grid.Column="2" />

              <!-- Changed from Grid to Border to support Background/Border/CornerRadius properties -->
              <Border x:Name="Border"
                      Grid.ColumnSpan="3"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      CornerRadius="{TemplateBinding CornerRadius}" />

              <Button x:Name="PART_PrimaryButton"
                      Grid.Column="0"
                      Foreground="{TemplateBinding Foreground}"
                      Background="{TemplateBinding Background}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      BorderBrush="Transparent"
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      Command="{TemplateBinding Command}"
                      CommandParameter="{TemplateBinding CommandParameter}"
                      FontFamily="{TemplateBinding FontFamily}"
                      FontSize="{TemplateBinding FontSize}"
                      FontWeight="{TemplateBinding FontWeight}"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                      Padding="{TemplateBinding Padding}"
                      KeyboardNavigation.IsTabStop="False" />

              <Button x:Name="PART_SecondaryButton"
                      Grid.Column="2"
                      Foreground="{TemplateBinding Foreground}"
                      Background="{TemplateBinding Background}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      BorderBrush="Transparent"
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      KeyboardNavigation.IsTabStop="False">
                <Button.Content>
                  <!-- TextBlock converted to a Path and placed within Viewbox -->
                  <Viewbox UseLayoutRounding="False"
                           IsHitTestVisible="False"
                           Height="12"
                           Width="12">
                    <Path x:Name="DropDownGlyphPath"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Right"
                          Fill="{TemplateBinding Foreground}"
                          Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z"
                          Stretch="Uniform" />
                  </Viewbox>
                </Button.Content>
              </Button>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <!-- Normal State (not a PseudoClass) -->
  <!-- The 'Button' style here was moved out of the main style above.
       In WinUI there is a child, customized style shared for both primary and secondary buttons.
       In Avalonia, we can use selectors to make a 'normal' style apply only to those buttons but
       pull it out separately from the full style above. -->
  <Style Selector="SplitButton /template/ Button">
    <!-- Applies to both Primary/Secondary buttons -->
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForeground}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="{DynamicResource SplitButtonBorderThemeThickness}" />
    <Setter Property="Template">
      <ControlTemplate>
        <!-- Switched from Grid to Border to optimize and support Foreground/Background properties -->
        <!-- It is important for the background to be clear and no CornerRadius set. -->
        <Border Background="Transparent">
          <ContentPresenter x:Name="ContentPresenter"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Border>
      </ControlTemplate>
    </Setter>
  </Style>

  <!-- Disabled State -->
  <Style Selector="SplitButton:disabled /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushDisabled}" />
  </Style>
  <Style Selector="SplitButton:disabled /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundDisabled}" />
  </Style>
  <Style Selector="SplitButton:disabled /template/ Button">
    <!-- Applies to both Primary/Secondary buttons -->
    <Setter Property="Background" Value="{DynamicResource SplitButtonBackgroundDisabled}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundDisabled}" />
  </Style>

  <!-- FlyoutOpen State -->
  <Style Selector="SplitButton:flyout-open /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:flyout-open /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:flyout-open /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPressed}" />
  </Style>
  <Style Selector="SplitButton:flyout-open /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>
  <Style Selector="SplitButton:flyout-open /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>

  <!-- TouchPressed State -->
  <Style Selector="SplitButton:touch-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:touch-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:touch-pressed /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPressed}" />
  </Style>
  <Style Selector="SplitButton:touch-pressed /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>
  <Style Selector="SplitButton:touch-pressed /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>

  <!-- PrimaryPointerOver State -->
  <Style Selector="SplitButton:primary-pointerover /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPointerOver}" />
  </Style>
  <Style Selector="SplitButton:primary-pointerover /template/ Button#PART_PrimaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPointerOver}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPointerOver}" />
  </Style>
  <Style Selector="SplitButton:primary-pointerover /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackground}" />
  </Style>

  <!-- PrimaryPressed State -->
  <Style Selector="SplitButton:primary-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:primary-pressed /template/ Button#PART_PrimaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPressed}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>
  <Style Selector="SplitButton:primary-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackground}" />
  </Style>

  <!-- SecondaryPointerOver State -->
  <Style Selector="SplitButton:secondary-pointerover /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackground}" />
  </Style>
  <Style Selector="SplitButton:secondary-pointerover /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPointerOver}" />
  </Style>
  <Style Selector="SplitButton:secondary-pointerover /template/ Button#PART_SecondaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPointerOver}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPointerOver}" />
  </Style>

  <!-- SecondaryPressed State -->
  <Style Selector="SplitButton:secondary-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackground}" />
  </Style>
  <Style Selector="SplitButton:secondary-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundPressed}" />
  </Style>
  <Style Selector="SplitButton:secondary-pressed /template/ Button#PART_SecondaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushPressed}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundPressed}" />
  </Style>

  <!-- Checked State -->
  <Style Selector="SplitButton:checked /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
  </Style>
  <Style Selector="SplitButton:checked /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>

  <!-- CheckedFlyoutOpen State -->
  <Style Selector="SplitButton:checked-flyout-open /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-flyout-open /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-flyout-open /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-flyout-open /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-flyout-open /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-flyout-open /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>

  <!-- CheckedTouchPressed State -->
  <Style Selector="SplitButton:checked-touch-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-touch-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-touch-pressed /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-touch-pressed /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-touch-pressed /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-touch-pressed /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>

  <!-- CheckedPrimaryPointerOver State -->
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPointerOver}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Button#PART_PrimaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPointerOver}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPointerOver}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pointerover /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>

  <!-- CheckedPrimaryPressed State -->
  <Style Selector="SplitButton:checked-primary-pressed /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pressed /template/ Button#PART_PrimaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pressed /template/ Button#PART_SecondaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-primary-pressed /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>

  <!-- CheckedSecondaryPointerOver State -->
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPointerOver}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Button#PART_SecondaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPointerOver}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPointerOver}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pointerover /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundCheckedPointerOver}" />
  </Style>

  <!-- CheckedSecondaryPressed State -->
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Border#Border">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Rectangle#PrimaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Rectangle#SecondaryBackgroundRectangle">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonBackgroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Button#PART_PrimaryButton">
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundChecked}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Button#PART_SecondaryButton">
    <Setter Property="BorderBrush" Value="{DynamicResource SplitButtonBorderBrushCheckedPressed}" />
    <Setter Property="Foreground" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>
  <Style Selector="SplitButton:checked-secondary-pressed /template/ Path#DropDownGlyphPath">
    <Setter Property="Fill" Value="{DynamicResource SplitButtonForegroundCheckedPressed}" />
  </Style>

  <!-- SecondaryButtonPlacement States -->
  <!-- Note: ':secondary-button-right' is the default -->
  <!--<Style Selector="SplitButton:secondary-button-span /template/ Button#PART_SecondaryButton">
    <Setter Property="(Grid.Column)" Value="0" />
    <Setter Property="(Grid.ColumnSpan)" Value="3" />
  </Style>-->

</Styles>
